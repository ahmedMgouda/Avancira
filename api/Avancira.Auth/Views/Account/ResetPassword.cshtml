@model ResetPasswordViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Reset Password";
}

<h2 class="text-center mb-3">Create a new password</h2>
<p class="text-center text-muted mb-4">Choose a strong password to secure your Avancira account.</p>

<form asp-action="ResetPassword" method="post" novalidate class="needs-validation" id="resetPasswordForm">
    @Html.AntiForgeryToken()

    @* Hidden fields for userId and token *@
    <input type="hidden" asp-for="UserId" />
    <input type="hidden" asp-for="Token" />

    @* Display validation errors *@
    <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>

    @* Password input *@
    <div class="mb-3">
        <label asp-for="Password" class="form-label">New Password</label>
        <div class="input-group">
            <input asp-for="Password"
                   type="password"
                   class="form-control"
                   id="passwordInput"
                   placeholder="Enter new password"
                   autocomplete="new-password" />
            <button class="btn btn-outline-secondary"
                    type="button"
                    id="togglePassword"
                    aria-label="Show password">
                <i class="bi bi-eye" id="toggleIcon"></i>
            </button>
        </div>
        <span asp-validation-for="Password" class="text-danger"></span>
        <div class="form-text">
            <small>
                <i class="bi bi-info-circle me-1"></i>
                Password must be at least 8 characters and include uppercase, lowercase, and a number
            </small>
        </div>
    </div>

    @* Confirm password input *@
    <div class="mb-3">
        <label asp-for="ConfirmPassword" class="form-label">Confirm Password</label>
        <div class="input-group">
            <input asp-for="ConfirmPassword"
                   type="password"
                   class="form-control"
                   id="confirmPasswordInput"
                   placeholder="Confirm new password"
                   autocomplete="new-password" />
            <button class="btn btn-outline-secondary"
                    type="button"
                    id="toggleConfirmPassword"
                    aria-label="Show password">
                <i class="bi bi-eye" id="toggleConfirmIcon"></i>
            </button>
        </div>
        <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
    </div>

    @* Password match indicator *@
    <div id="passwordMatchMessage" class="alert d-none mb-3" role="alert"></div>

    @* Submit button *@
    <button type="submit" class="btn btn-primary w-100">
        <i class="bi bi-check-circle-fill me-2"></i>Reset Password
    </button>
</form>

<p class="text-center mt-4 mb-0">
    <a asp-action="Login" class="link-secondary">Back to login</a>
</p>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        (function () {
            // Toggle password visibility
            const passwordInput = document.getElementById('passwordInput');
            const togglePassword = document.getElementById('togglePassword');
            const toggleIcon = document.getElementById('toggleIcon');

            const confirmPasswordInput = document.getElementById('confirmPasswordInput');
            const toggleConfirmPassword = document.getElementById('toggleConfirmPassword');
            const toggleConfirmIcon = document.getElementById('toggleConfirmIcon');

            const passwordMatchMessage = document.getElementById('passwordMatchMessage');

            // Toggle password visibility for password field
            if (togglePassword && passwordInput) {
                togglePassword.addEventListener('click', function () {
                    const type = passwordInput.type === 'password' ? 'text' : 'password';
                    passwordInput.type = type;

                    // Toggle icon
                    if (type === 'text') {
                        toggleIcon.classList.remove('bi-eye');
                        toggleIcon.classList.add('bi-eye-slash');
                    } else {
                        toggleIcon.classList.remove('bi-eye-slash');
                        toggleIcon.classList.add('bi-eye');
                    }
                });
            }

            // Toggle password visibility for confirm password field
            if (toggleConfirmPassword && confirmPasswordInput) {
                toggleConfirmPassword.addEventListener('click', function () {
                    const type = confirmPasswordInput.type === 'password' ? 'text' : 'password';
                    confirmPasswordInput.type = type;

                    // Toggle icon
                    if (type === 'text') {
                        toggleConfirmIcon.classList.remove('bi-eye');
                        toggleConfirmIcon.classList.add('bi-eye-slash');
                    } else {
                        toggleConfirmIcon.classList.remove('bi-eye-slash');
                        toggleConfirmIcon.classList.add('bi-eye');
                    }
                });
            }

            // Check password match in real-time
            function checkPasswordMatch() {
                if (!passwordInput || !confirmPasswordInput || !passwordMatchMessage) {
                    return;
                }

                const password = passwordInput.value;
                const confirmPassword = confirmPasswordInput.value;

                // Only show message if confirm password has content
                if (confirmPassword.length === 0) {
                    passwordMatchMessage.classList.add('d-none');
                    return;
                }

                passwordMatchMessage.classList.remove('d-none');

                if (password === confirmPassword) {
                    passwordMatchMessage.className = 'alert alert-success mb-3';
                    passwordMatchMessage.innerHTML = '<i class="bi bi-check-circle-fill me-2"></i>Passwords match';
                } else {
                    passwordMatchMessage.className = 'alert alert-warning mb-3';
                    passwordMatchMessage.innerHTML = '<i class="bi bi-exclamation-triangle-fill me-2"></i>Passwords do not match';
                }
            }

            // Add event listeners for real-time password matching
            if (passwordInput && confirmPasswordInput) {
                passwordInput.addEventListener('input', checkPasswordMatch);
                confirmPasswordInput.addEventListener('input', checkPasswordMatch);
            }
        })();
    </script>
}